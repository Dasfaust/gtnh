# Configuration file

cleanroom_allowed_blocks {

    managlass {
        S:Name=tile.manaGlass
        I:Percentage=50
    }

    elfglass {
        S:Name=tile.elfGlass
        I:Percentage=50
    }

    reinforced_glass {
        S:Name=blockAlloyGlass
        I:Percentage=5
    }

    bw_reinforced_glass_0 {
        I:Meta=0
        S:Name=BW_GlasBlocks
        I:Percentage=50
    }

    bw_reinforced_glass {
        S:Name=BW_GlasBlocks
        I:Percentage=100
    }

    elevator {
        S:Name=tile.openblocks.elevator
        I:Count=1
    }

    elevator_rotating {
        S:Name=tile.openblocks.elevator_rotating
        I:Count=1
    }

    travel_anchor {
        S:Name=tile.blockTravelAnchor
        I:Count=1
    }

    warded_glass {
        I:Meta=2
        S:Name=tile.blockCosmeticOpaque
        I:Percentage=50
    }

}


features {
    I:MaxOreStackSize=64
    I:MaxOtherBlockStackSize=64
    I:UpgradeStacksize=4
    I:MaxPlankStackSize=64
    I:MaxLogStackSize=64
}


general {
    B:LowGravProcessing=true
    B:ReenableSimplifiedChemicalRecipes=false
    B:AdventureModeStartingAxe=true
    I:SkeletonsShootGTArrows=16
    B:BrickedBlastFurnace=true
    B:sound_multi_threading=false
    B:NerfCrops=true
    B:EnableAE2Integration=true
    I:oreveinMaxPlacementAttempts_8=8
    B:EnableCleanroom=true
    B:IncreaseDungeonLoot=false
    I:MillisecondsPassedInGTTileEntityUntilLagWarning=100
    B:CropNeedBlockBelow=true
    B:"hide assline recipes"=false
    B:AllowSmallBoilerAutomation=false
    B:"update fluid display items"=true
    B:debugStones=false
    B:EasierEVPlusCables=false
    B:forceAdventureMode=false
    B:Ic2EnergySourceCompat=true
    B:LoggingPlayerActivity=true
    B:RichOreYieldMultiplier=true
    I:oreveinPercentage_75=100
    B:WoodNeedsSawForCrafting=true
    B:GTBees=true
    B:smallerVanillaToolDurability=true
    B:timber_axe=false
    S:ctm_block_blacklist <
        team.chisel.block.BlockRoadLine
     >
    I:oreveinPlacerOresMultiplier=2
    B:debugWorldData=false
    B:EnsureToBeLoadedLast=true
    I:MaxEqualEntitiesAtOneSpot=6
    B:debugWorldGen=false
    B:DisableOldChemicalRecipes=false
    B:debugOrevein=false
    B:EnableAllComponents=false
    I:FlintAndSteelChance=30
    B:InventoryUnification=true
    B:CraftingUnification=true
    B:debugEntityCramming=false
    B:HideUnusedOres=false
    B:HardCoreCableLoss=false
    B:DisableVanillaOres=true
    B:LoggingOreDict=false
    B:debugBlockPump=false
    B:debugBlockMiner=false
    B:GT6StyledPipesConnection=true
    B:show_all_metaitems_in_creative_and_NEI=false
    B:disable_STDOUT=false
    B:EnablePlaceholderForMaterialNamesInLangFile=true
    B:Debug2=false
    B:EndOreYieldMultiplier=true
    I:oreveinAttempts_64=64
    I:LongDistancePipelineMinimalDistancePoints=64
    B:NerfDustCrafting=true
    B:"debug allow broken recipemap"=false
    B:GT6StyledWiresConnection=true
    B:debugCleanroom=false
    B:disable_STDERR=false
    B:oreveinPlacerOres=true
    B:crashOnNullRecipeInput=true
    B:NerfCombs=true
    B:EnableAllMaterials=false
    B:MixedOreOnlyYieldsTwoThirdsOfPureOre=false
    B:hardermobspawners=true
    B:online=true
    I:TicksForLagAveragingWithScanner=25
    B:CableConnectionRequiresSolderingMaterial=false
    B:ExplosionItemDrops=true
    I:ItemDespawnTime=6000
    B:NetherOreYieldMultiplier=true
    B:Debug=false
    B:"GTNH Optimised Material Loading"=true
    B:DisableIC2Cables=true
    B:harderstone=false
    I:oreveinPercentage_100=100
    B:ArcSmeltIntoAnnealedWrought=true
    B:EnableAchievements=true
    B:HardMachineCasings=true
    B:AddGTRecipesToIC2Machines=true
    B:AFK_Hunger=false
    B:AllowAutoMaintenanceHatchInteraction=true
    B:HideRecyclingRecipes=false
    B:LoggingExplosions=true
    B:debugDriller=false
    B:debugSmallOres=false
    B:drinks_always_drinkable=true
    S:ctm_block_whitelist <
        team.chisel.block.BlockCarvable
        team.chisel.block.BlockCarvableGlass
     >
}


machines {
    B:machines_explosion_damage=false
    B:use_machine_metal_tint=true
    B:enableChunkloaders=true
    B:guis_in_consistent_machine_metal_color=false
    I:TicksBetweenSounds=30
    B:fire_causes_explosions=true
    B:alwaysReloadChunkloaders=false
    B:lightning_causes_explosions=true
    B:disableDigitalChestsExternalAccess=false
    B:colored_guis_when_painted=true
    D:ReinforcedGlassPercentageForCleanroom=5.0
    B:rain_causes_explosions=true
    B:explosions_on_nonwrenching=true
    B:machines_flammable=true

    # This enabled MuTEs(multitile entities) to be added to the game. MuTEs are in the start of development and its not recommended to enable them unless you know what you are doing.
    B:enableMultiTileEntities=false
    B:debugChunkloaders=false
    B:constant_need_of_energy=true
    B:wirefire_on_explosion=true
}


pollution {
    I:PollutionSmallCoalBoiler=20
    D:PollutionReleasedByTierGasTurbineGenerator <
        0.1
        1.0
        0.9
        0.8
        0.7
        0.6
     >
    I:PollutionImplosionCompressor=10000
    I:PollutionExtremeCombustionEngine=3840
    I:SourRainLimit=2000000
    I:PollutionBaseGasTurbineGenerator=40
    I:PollutionPyrolyseOven=300
    B:EnablePollution=false
    D:PollutionReleasedByThrottle=0.041666666666666664
    I:PollutionLargeTitaniumBoiler=3000
    I:PollutionEBF=400
    I:PollutionMultiSmelter=400
    I:SmogLimit=500000
    I:PollutionLargeTungstenSteelBoiler=4000
    I:PollutionHighPressureCoalBoiler=30
    I:PollutionCharcoalPit=100
    I:PollutionHighPressureLavaBoiler=20
    I:PollutionLargeBronzeBoiler=1000
    I:PoisonLimit=750000
    I:PollutionLargeSteelBoiler=2000
    D:PollutionReleasedByTierDieselGenerator <
        0.1
        1.0
        0.9
        0.8
     >
    I:PollutionPrimitiveBlastFurnace=200
    I:VegetationLimit=1000000
    I:PollutionBaseDieselGenerator=40
    I:PollutionLargeCombustionEngine=480
    I:PollutionLargeGasTurbine=300
}


##########################################################################################################
# undergroundfluid
#--------------------------------------------------------------------------------------------------------#
# Config Underground Fluids (Delete this Category for regenerate)
##########################################################################################################

undergroundfluid {
    # Dimension IDs Black List
    I:DimBlackList <
        -1
        1
     >

    ##########################################################################################################
    # overworld
    #--------------------------------------------------------------------------------------------------------#
    # Set Overworld Generating
    ##########################################################################################################

    overworld {
        # Dimension ID or Class Name
        S:Dimension=0

        gas_natural_gas {
            # Fluid registry name
            S:Registry=gas_natural_gas

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=350

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        liquid_light_oil {
            # Fluid registry name
            S:Registry=liquid_light_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        liquid_medium_oil {
            # Fluid registry name
            S:Registry=liquid_medium_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        liquid_heavy_oil {
            # Fluid registry name
            S:Registry=liquid_heavy_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        oil {
            # Fluid registry name
            S:Registry=oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

    }

    ##########################################################################################################
    # moon
    #--------------------------------------------------------------------------------------------------------#
    # Set Moon Generating
    ##########################################################################################################

    moon {
        # Dimension ID or Class Name
        S:Dimension=Moon

        helium-3 {
            # Fluid registry name
            S:Registry=helium-3

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=425

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        saltwater {
            # Fluid registry name
            S:Registry=saltwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

    }

    mercury {
        # Dimension ID or Class Name
        S:Dimension=Mercury

        helium-3 {
            # Fluid registry name
            S:Registry=helium-3

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        molten_iron {
            # Fluid registry name
            S:Registry=molten.iron

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=400

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=30
        }

    }

    venus {
        # Dimension ID or Class Name
        S:Dimension=Venus

        molten_lead {
            # Fluid registry name
            S:Registry=molten.lead

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=1600

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        sulfuric_acid {
            # Fluid registry name
            S:Registry=sulfuricacid

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=250

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        carbon_dioxide {
            # Fluid registry name
            S:Registry=carbondioxide

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=1500

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    mars {
        # Dimension ID or Class Name
        S:Dimension=Mars

        saltwater {
            # Fluid registry name
            S:Registry=saltwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=400

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        chlorobenzene {
            # Fluid registry name
            S:Registry=chlorobenzene

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=400

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    io {
        # Dimension ID or Class Name
        S:Dimension=Io

        molten_lead {
            # Fluid registry name
            S:Registry=molten.lead

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=650

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        sulfuric_acid {
            # Fluid registry name
            S:Registry=sulfuricacid

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=350

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=80
        }

        carbon_dioxide {
            # Fluid registry name
            S:Registry=carbondioxide

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=750

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=80
        }

    }

    europa {
        # Dimension ID or Class Name
        S:Dimension=Europa

        saltwater {
            # Fluid registry name
            S:Registry=saltwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        veryheavyoil {
            # Fluid registry name
            S:Registry=liquid_extra_heavy_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

        distilled_water {
            # Fluid registry name
            S:Registry=ic2distilledwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=3500

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=80
        }

    }

    callisto {
        # Dimension ID or Class Name
        S:Dimension=Callisto

        oxygen {
            # Fluid registry name
            S:Registry=oxygen

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        liquid_air {
            # Fluid registry name
            S:Registry=liquidair

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=2

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    titan {
        # Dimension ID or Class Name
        S:Dimension=Titan

        methane {
            # Fluid registry name
            S:Registry=methane

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        ethane {
            # Fluid registry name
            S:Registry=ethane

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    miranda {
        # Dimension ID or Class Name
        S:Dimension=Miranda

        hydrogen_sulfide {
            # Fluid registry name
            S:Registry=liquid_hydricsulfur

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=900

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    oberon {
        # Dimension ID or Class Name
        S:Dimension=Oberon

        carbon_monoxide {
            # Fluid registry name
            S:Registry=carbonmonoxide

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=2000

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    triton {
        # Dimension ID or Class Name
        S:Dimension=Triton

        nitrogen {
            # Fluid registry name
            S:Registry=nitrogen

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        ethylene {
            # Fluid registry name
            S:Registry=ethylene

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    proteus {
        # Dimension ID or Class Name
        S:Dimension=Proteus

        deuterium {
            # Fluid registry name
            S:Registry=deuterium

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=700

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    pluto {
        # Dimension ID or Class Name
        S:Dimension=Pluto

        nitrogen {
            # Fluid registry name
            S:Registry=nitrogen

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        oxygen {
            # Fluid registry name
            S:Registry=oxygen

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        liquid_air {
            # Fluid registry name
            S:Registry=liquidair

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=4

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=300

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=40
        }

        fluorine {
            # Fluid registry name
            S:Registry=fluorine

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=4

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=80
        }

    }

    makemake {
        # Dimension ID or Class Name
        S:Dimension=Makemake

        hydrofluoric_acid {
            # Fluid registry name
            S:Registry=hydrofluoricacid_gt5u

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=300

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=80
        }

    }

    acentauribb {
        # Dimension ID or Class Name
        S:Dimension=aCentauriBb

        molten_copper {
            # Fluid registry name
            S:Registry=molten.copper

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=300

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=10
        }

    }

    barnardc {
        # Dimension ID or Class Name
        S:Dimension=BarnardaC

        veryheavyoil {
            # Fluid registry name
            S:Registry=liquid_extra_heavy_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=800

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        unknowwater {
            # Fluid registry name
            S:Registry=unknowwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=300

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        distilled_water {
            # Fluid registry name
            S:Registry=ic2distilledwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=8000

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    barnarde {
        # Dimension ID or Class Name
        S:Dimension=BarnardaE

        liquid_air {
            # Fluid registry name
            S:Registry=liquidair

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=400

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=20
        }

    }

    barnardf {
        # Dimension ID or Class Name
        S:Dimension=BarnardaF

        molten_tin {
            # Fluid registry name
            S:Registry=molten.tin

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=400

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=15
        }

    }

    TCetiE {
        # Dimension ID or Class Name
        S:Dimension=TCetiE

        veryheavyoil {
            # Fluid registry name
            S:Registry=liquid_extra_heavy_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=200

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

        hydrogen {
            # Fluid registry name
            S:Registry=hydrogen

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=700

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=50
        }

        distilled_water {
            # Fluid registry name
            S:Registry=ic2distilledwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=10000

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    ##########################################################################################################
    # default
    #--------------------------------------------------------------------------------------------------------#
    # Set Default Generating (Use this Category for Default settings)
    ##########################################################################################################

    default {
    }

    ross128b {
        # Dimension ID or Class Name
        S:Dimension=Ross128b

        veryheavyoil {
            # Fluid registry name
            S:Registry=liquid_extra_heavy_oil

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=40
        }

        lava {
            # Fluid registry name
            S:Registry=lava

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=820

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=5
        }

        gas_natural_gas {
            # Fluid registry name
            S:Registry=gas_natural_gas

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=625

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=65
        }

        distilled_water {
            # Fluid registry name
            S:Registry=ic2distilledwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=5000

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=100
        }

    }

    ross128ba {
        # Dimension ID or Class Name
        S:Dimension=Ross128ba

        saltwater {
            # Fluid registry name
            S:Registry=saltwater

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=1250

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=40
        }

        helium-3 {
            # Fluid registry name
            S:Registry=helium-3

            # Decrease per operation (actual fluid gained works like (Litre)VeinData/5000)
            I:DecreasePerOperationAmount=5

            # Min amount generation (per operation, sets the VeinData) 0 MIN
            I:MinAmount=0

            # Max amount generation (per operation, sets the VeinData) 80000 MAX
            I:MaxAmount=1250

            # Chance generating (weighted chance!, there will be a fluid in chunk always!)
            I:Chance=60
        }

    }

}


